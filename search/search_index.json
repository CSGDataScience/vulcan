{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vulcan The Vulcan library aims to provide a consitent interface around sourcing external data sources. Primary concepts VulcanService VulcanServer","title":"Home"},{"location":"#vulcan","text":"The Vulcan library aims to provide a consitent interface around sourcing external data sources. Primary concepts VulcanService VulcanServer","title":"Vulcan"},{"location":"server/","text":"Vulcan Server VulcanServer is a convention-heavy but light extension of the Flask Web Framework. The VulcanServer class makes it simple to turn your VulcanService into a full fledged REST API. Creating an API from my_project import MyVulcanService from vulcan.server import VulcanServer my_service_api = VulcanServer(__name__, service=MyVulcanService) # VulcanServer.run supports all Flask.Application.run options my_service_api.run(debug=True)","title":"VulcanServer"},{"location":"server/#vulcan-server","text":"VulcanServer is a convention-heavy but light extension of the Flask Web Framework. The VulcanServer class makes it simple to turn your VulcanService into a full fledged REST API.","title":"Vulcan Server"},{"location":"server/#creating-an-api","text":"from my_project import MyVulcanService from vulcan.server import VulcanServer my_service_api = VulcanServer(__name__, service=MyVulcanService) # VulcanServer.run supports all Flask.Application.run options my_service_api.run(debug=True)","title":"Creating an API"},{"location":"service/","text":"Vulcan Service The VulcanService base class enforces a the basic methods required to create a serve-able resource. Your class, which should inherit from VulcanService is expected to implement init , fetch_one , and fetch_all . All VulcanService methods have a defined-optional argument called a context . Within context , a requester of your service can provide additional information about the request and how it should be fulfilled. For example, in a clinical application, it is likely important to know what facility or patient specifically is in question. Context is where we provide those details. For more details on the context object, read on. VulcanService Instance Methods VulcanService.init Your VulcanService is required to implement an init method, which returns enough data to satisfy the initial rendering or utilization of your resource. For example, if you were modeling a news application like HackerNews, your init method should return enough data to render the front page of the HackerNews. from vulcan.service import VulcanService class HackerNews(VulcanService): def init(self, context): articles = [ {'title': 'BlockChain down 45%', ...}, {'title': 'I let a ML model decide what I ate for a week...', ...}, ... ] return articles VulcanService.fetch_one TODO VulcanService.fetch_all TODO","title":"VulcanService"},{"location":"service/#vulcan-service","text":"The VulcanService base class enforces a the basic methods required to create a serve-able resource. Your class, which should inherit from VulcanService is expected to implement init , fetch_one , and fetch_all . All VulcanService methods have a defined-optional argument called a context . Within context , a requester of your service can provide additional information about the request and how it should be fulfilled. For example, in a clinical application, it is likely important to know what facility or patient specifically is in question. Context is where we provide those details. For more details on the context object, read on.","title":"Vulcan Service"},{"location":"service/#vulcanservice-instance-methods","text":"","title":"VulcanService Instance Methods"},{"location":"service/#vulcanserviceinit","text":"Your VulcanService is required to implement an init method, which returns enough data to satisfy the initial rendering or utilization of your resource. For example, if you were modeling a news application like HackerNews, your init method should return enough data to render the front page of the HackerNews. from vulcan.service import VulcanService class HackerNews(VulcanService): def init(self, context): articles = [ {'title': 'BlockChain down 45%', ...}, {'title': 'I let a ML model decide what I ate for a week...', ...}, ... ] return articles","title":"VulcanService.init"},{"location":"service/#vulcanservicefetch_one","text":"TODO","title":"VulcanService.fetch_one"},{"location":"service/#vulcanservicefetch_all","text":"TODO","title":"VulcanService.fetch_all"}]}